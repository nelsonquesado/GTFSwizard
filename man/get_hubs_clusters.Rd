% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_hubs_cluster.R
\name{get_hubs_clusters}
\alias{get_hubs_clusters}
\title{Identify and Cluster High-Transfer Stops}
\usage{
get_hubs_clusters(obj, ...)
}
\arguments{
\item{obj}{An object of class `wizardgtfs` or `wzd_hubs`. If a `wizardgtfs` object is provided, high-transfer stops are first extracted using `get_stop_hubs`.}

\item{...}{Additional arguments passed to the underlying methods, such as parameters for `get_stop_hubs`.}
}
\value{
A `wzd_hubscluster` object (a specialized tibble) with the following columns:
\describe{
  \item{cluster}{The cluster ID assigned to each stop, based on its transfer characteristics.}
  \item{stop_id}{The ID of the stop included in the cluster.}
  \item{n_routes}{The number of unique routes serving the stop.}
  \item{mean_n_routes}{The average number of routes for all stops in the same cluster.}
}
}
\description{
`get_hubs_clusters` identifies high-transfer stops and groups them into clusters based on the number of routes served. This helps in identifying transit hubs and patterns in transit networks.
}
\details{
The function performs the following steps:
\enumerate{
  \item Groups stops by `service_pattern` and `hour`.
  \item For stops with a high number of routes (above the 75th percentile), applies k-means clustering (with 4 centers) to assign cluster IDs.
  \item For stops with fewer routes (below or equal to the 75th percentile), assigns all stops to a single cluster.
  \item Combines clustered data into a single table and calculates the mean number of routes for each cluster.
}
}
\note{
- Ensure the input `obj` contains high-transfer stop data if passing a `wzd_transfers` object.

- The clustering process uses k-means, so results may vary depending on the data distribution.
}
\examples{
# Generate transfer clusters from a wizardgtfs object
clusters <- get_transfer_clusters(for_bus_gtfs, threshold = 10)

# Generate clusters directly from a high-transfer stops object
high_transfer_stops <- get_high_transfer_stops(for_bus_gtfs)
clusters <- get_transfer_clusters(high_transfer_stops)

}
\seealso{
[get_stop_hubs()], [stats::kmeans()]
}
